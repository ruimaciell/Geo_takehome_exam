geom_sf(data = sa_municipalities, color = 'black') +
geom_sf(data = dams_sf, color = 'blue', size = 2) +
theme_minimal() +
labs(title = "Municipalities Grid in SA with Dams")
library(ggplot2)
library(sf)
library(readxl)
# Load the municipalities shapefile
sa_municipalities <- st_read("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Assignment_1/First_image/MDB_Local_Municipal_Boundary_2018/MDB_Local_Municipal_Boundary_2018.shp")
# Load the CSV file into R
dams_plot_data <- read.csv("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Assignment_1/First_image/dams.csv", header = TRUE, stringsAsFactors = FALSE, sep = ";")
# Convert latitude and longitude columns to numeric types
dams_plot_data$Latitude.deg <- as.numeric(dams_plot_data$Latitude.deg)
dams_plot_data$Longitude.deg <- as.numeric(dams_plot_data$Longitude.deg)
# Removing rows with NA in latitude or longitude
dams_plot_data <- na.omit(dams_plot_data[, c("Name.of.dam", "Latitude.deg", "Longitude.deg")])
# Convert the dams data into an sf object
dams_sf <- st_as_sf(dams_plot_data, coords = c("Longitude.deg", "Latitude.deg"), crs = 4326)
# Plot the map
ggplot() +
geom_sf(data = sa_municipalities, color = 'black') +
geom_sf(data = dams_sf, color = 'blue', size = 0.5) +
theme_minimal() +
labs(title = "Municipalities Grid in SA with Dams")
# Plot the map
ggplot() +
geom_sf(data = sa_municipalities, color = 'black') +
geom_sf(data = dams_sf, color = 'blue', size = 0.01) +
theme_minimal() +
labs(title = "Municipalities Grid in SA with Dams")
# Load the municipalities shapefile
sa_municipalities <- st_read("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Assignment_1/First_image/MDB_Local_Municipal_Boundary_2018/MDB_Local_Municipal_Boundary_2018.shp")
# Load the CSV file into R
dams_plot_data <- read.csv("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Assignment_1/First_image/dams.csv", header = TRUE, stringsAsFactors = FALSE, sep = ";")
# Convert latitude and longitude columns to numeric types
dams_plot_data$Latitude.deg <- as.numeric(dams_plot_data$Latitude.deg)
dams_plot_data$Longitude.deg <- as.numeric(dams_plot_data$Longitude.deg)
dams_plot_data$Latitude.deg <- -abs(dams_plot_data$Latitude.deg)
# Removing rows with NA in latitude or longitude
dams_plot_data <- na.omit(dams_plot_data[, c("Name.of.dam", "Latitude.deg", "Longitude.deg")])
# Convert the dams data into an sf object
dams_sf <- st_as_sf(dams_plot_data, coords = c("Longitude.deg", "Latitude.deg"), crs = 4326)
# Plot the map
ggplot() +
geom_sf(data = sa_municipalities, color = 'black') +
geom_sf(data = dams_sf, color = 'blue', size = 0.01) +
theme_minimal() +
labs(title = "Municipalities Grid in SA with Dams")
# Plot the map
ggplot() +
geom_sf(data = sa_municipalities, color = 'black') +
geom_sf(data = dams_sf, color = 'blue') +
theme_minimal() +
labs(title = "Municipalities Grid in SA with Dams")
View(dams_sf)
View(sa_districts)
View(dams_sf)
## ------------------------------------------------------
## 01_CLASS03.R - R Script for Lecture 03
# version: 1.0
# Author: Bruno Conte Leite @2023-24
# bruno.conte@bse.eu
## ------------------------------------------------------
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
# 1. SF ATTRIBUTE OPERATIONS ----
# Let us use the world dataset for that:
sf.world <- world
# 1.1. Basic operations:
# Slicing (choosing rows):
sf.world[1:3,] # basic R 'vector' syntax
sf.world %>% # tidyverse syntax
slice(1:3)
# Selecting (choosing columns
# /variables):
sf.world[,1:3]
sf.world %>%
select(1:3) # by index
sf.world %>% # by names: MUCH MORE RECCOMENDED!
select(iso_a2,name_long, continent)
# Filtering: countries whose area>200.000 km2
sf.world %>%
filter(area_km2>2*1e5) # select variables
# FOR ILLUSTRATION: when filtering, there is
# an underlying logical vector (TRUE/FALSE):
sf.world$area_km2>2*1e5
logical.vector <- sf.world$area_km2>2*1e5
sf.world[logical.vector,]
rm(logical.vector)
# 1.2. Aggregating
# Let us start with a simple data.frame
# example (no geometry):
df.world <- st_drop_geometry(sf.world) # it is just a data set
# Aggregating (collapsing, in Stata) total
# area in each continent:
df.world %>%
group_by(continent) %>%
summarise(total_area = sum(area_km2))
# Multiple variables:
df.world %>%
group_by(continent) %>%
summarise(total_area = sum(area_km2), average_pop = mean(pop))
# Watch out for missing data (NA)!!!
df.world %>%
group_by(continent) %>%
summarise(total_area = sum(area_km2), average_pop = mean(pop,na.rm=T))
# NaN: average of zeros/NA; that is missing data in
# all observations of the group (continent)
rm(df.world)
# Aggregating SF: also aggregate geometries
# (if polygons, make them multipolygon AND
# join the polygons that touch one another)
sf.world.agg <- world %>%
group_by(continent) %>%
summarize(pop = sum(pop))
# Likely error: how to solve it?
# https://stackoverflow.com/questions/68478179/how-to-resolve-spherical-geometry-failures-when-joining-spatial-data
sf_use_s2(F)
# Be careful with this: it happens because this
# geometry has low precision! Watch out!
sf.world.agg <- sf.world %>%
group_by(continent) %>%
summarize(pop = sum(pop,na.rm=T))
ggplot(sf.world.agg) +
geom_sf(aes(fill=pop))
# Using factors inside aesthetics
# (transform continuous scale into
# discrete):
ggplot(sf.world.agg) +
geom_sf(aes(fill=as.factor(pop)))
# Multiple aggregation:
sf.world.agg <- sf.world %>%
group_by(continent) %>%
summarise(pop = sum(pop,na.rm = T), area = sum(area_km2,na.rm = T))
ggplot(sf.world.agg) +
geom_sf(aes(fill=as.factor(round(area/1e6,0)))) +
scale_fill_discrete(name = 'Total area\n(million km2')
# what is scale_*()?
ggplot(sf.world.agg) +
geom_sf(aes(fill=round(area/1e6,0))) +
scale_fill_binned()
# what is scale_*()?
rm(sf.world.agg)
sf_use_s2(T) # restore default
# 3.3. Vector merging (joining):
# Suppose we have an additional dataset
df.coffe <- coffee_data
df.coffe
# Merging (joining it) to the sf:
sf.world.merged <-sf.world %>%
left_join(df.coffe)
# all variables from sf.world linked to
# coffe production from df.coffee!
sf.world.merged %>%
select(name_long,continent,coffee_production_2017)
ggplot(sf.world.merged) +
geom_sf(aes(fill=coffee_production_2017)) +
scale_fill_distiller(palette = 'Greens')
ggplot(sf.world.merged) +
geom_sf(aes(fill=coffee_production_2017)) +
scale_fill_distiller(name = 'Coffee', palette = 'Spectral', na.value = NA) +
theme_bw()
# What if the "merging variables" between datasets
# do not have the same names?
# Here I artificially change names in the coffe data:
df.coffe <- df.coffe %>%
rename(country.name = name_long)
# Try to merge:
sf.world %>%
left_join(df.coffe)
View(df.coffe)
View(df.coffe)
View(sa_dams)
View(sa_districts)
View(sa_districts)
View(sf.world)
# Idea: similar to merging, but based on
# topological relations. As before, standard is
# st_intersects()
# Generating a random SF points:
set.seed(2018) # set seed for reproducibility
bb <- st_bbox(world) # the world's bounds
#>   xmin   ymin   xmax   ymax
#> -180.0  -89.9  180.0   83.6
random_df <- data.frame(
x = runif(n = 10, min = bb[1], max = bb[3]),
y = runif(n = 10, min = bb[2], max = bb[4])
)
rm(bb)
sf.random_points <- random_df %>%
st_as_sf(coords = c("x", "y"))  %>%  # set coordinates
st_set_crs("EPSG:4326") # set geographic CRS
rm(random_df)
# Visualizing:
ggplot() +
geom_sf(data = world) +
geom_sf(data = sf.random_points)
# What if we want to merge the country data
# into the SF random points based on intersection?
sf.points.merged <- sf.random_points %>%
st_join(world)
ggplot() +
geom_sf(data = world) +
geom_sf(data = sf.points.merged, aes(color=name_long))
# As with filtering, st_join() allows for other
# topological relationships:
sf.random_points %>%
st_join(world,join = st_covers)
# all missing: points do not cover polygons
# WATCH OUT: ALWAYS CHECKE WHETHER THERE ARE
# FIELDS (VARIABLES) WITH THE SAME NAME!
# Joining based on distance (disjoint
# geometries):
sf.disj.1 <- cycle_hire
sf.disj.2 <- cycle_hire_osm
ggplot() +
geom_sf(data = sf.disj.1) +
geom_sf(data = sf.disj.2,color='red', alpha=.5)
# Do they touch?
st_touches(sf.disj.1,sf.disj.2,sparse = F)
any(st_touches(sf.disj.1,sf.disj.2,sparse = F))
# Joining them based on 20 meters distance:
logical.dist <- st_is_within_distance(sf.disj.1, sf.disj.2,
dist = units::set_units(20, "m"))
logical.dist
logical.dist[100:150]
logical.dist <- st_is_within_distance(
sf.disj.1,
sf.disj.2,
dist = units::set_units(20, "m"),
sparse = F
)
dim(logical.dist)
sf.disjoint.joined <- st_join(
sf.disj.1,
sf.disj.2,
st_is_within_distance,
dist = units::set_units(20, "m")
)
# BE CAREFUL: this can be consume a lot of
# CPU time depending on the size of the
# features you are merging!
# 2.3. Spatial join of incongruent layers
# check Chapter 4.2.7 of
# https://r.geocompx.org/spatial-operations.html
# ----
# Load necessary libraries
library(sf)
library(ggplot2)
# Assuming 'lnd' and 'cycle_hire' are already loaded and are sf objects
sf.great.london <- lnd
sf.bikes <- cycle_hire
centrallondon <- sf.great.london %>%
st_filter(sf.bikes)
# Plotting
ggplot() +
geom_sf(data = centrallondon, fill = 'lightblue', color = 'black') + # Plot filtered polygons
geom_sf(data = sf.bikes, color = 'red') + # Plot bike stations
theme_minimal() +
labs(title = "Filtered London Areas with Bike Stations")
# Spatial join:
# Spatial Join: Assign neighborhood names to bike stations
# Using st_intersects as the default join method
sf.bikes.with.neighborhood <- st_join(sf.bikes, centrallondon, join = st_intersects)
# Plotting
ggplot() +
geom_sf(data = centrallondon, fill = 'lightblue', color = 'black') + # Plot the neighborhoods
geom_sf(data = sf.bikes.with.neighborhood, aes(color = NAME)) + # Plot bike stations colored by neighborhood
theme_minimal() +
labs(title = "Bike Stations in Central London by Neighborhood",
color = "Neighborhood")
# Spatial join + aggregation:
# Spatial join to associate each bike station with a neighborhood
sf.bikes.with.neighborhood <- st_join(sf.bikes, centrallondon, join = st_intersects)
# Count the number of bike stations per neighborhood
bike_counts_per_neighborhood <- sf.bikes.with.neighborhood %>%
group_by(NAME) %>%
summarise(bike_count = n())
# Joining the count back to the centrallondon dataset
centrallondon_with_bike_counts <- centrallondon %>%
left_join(bike_counts_per_neighborhood, by = "NAME")
View(sf.bikes)
# Convert latitude and longitude columns to numeric types
dams_plot_data$Latitude.deg <- as.numeric(dams_plot_data$Latitude.deg)
dams_plot_data$Longitude.deg <- as.numeric(dams_plot_data$Longitude.deg)
dams_plot_data$Latitude.deg <- -abs(dams_plot_data$Latitude.deg)
# Removing rows with NA in latitude or longitude
dams_plot_data <- na.omit(dams_plot_data[, c("Name.of.dam", "Latitude.deg", "Longitude.deg")])
# Convert the dams data into an sf object
dams_sf <- st_as_sf(dams_plot_data, coords = c("Longitude.deg", "Latitude.deg"), crs = 4326)
View(dams_plot_data)
View(dams_sf)
View(sf.bikes)
View(sa_dams)
View(sa_districts)
View(sa_municipalities)
View(sa_dams)
View(df.coffe)
View(logical.dist)
View(sf.world.merged)
View(dams_sf)
# Load the sf package
library(sf)
# Load the sf package
library(sf)
# Read the shapefile
populated_places <- st_read("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Assignment_2/ne_10m_populated_places/ne_10m_populated_places.shp")
# Check the first few rows of the data
head(populated_places)
# Summary of the data
summary(populated_places)
# Plot the data
plot(populated_places)
View(populated_places)
View(populated_places)
# Read populated places shapefile
populated_places <- st_read("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Assignment_2/ne_10m_populated_places/ne_10m_populated_places.shp")
# Read countries shapefile
countries <- st_read("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Assignment_2/ne_10m_admin_0_sovereignty/ne_10m_admin_0_sovereignty.shp")
# Spatial join of populated places with countries
joined_data <- st_join(populated_places, countries, join = st_within)
View(countries)
View(countries)
library(sf)
library(ggplot2)
countries <- st_read("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Assignment_2/ne_10m_admin_0_sovereignty/ne_10m_admin_0_sovereignty.shp")
# Plot the map
ggplot(data = countries) +
geom_sf(aes(fill = pop_est), color = "white", size = 0.1) +  # Use pop_est for coloring
scale_fill_viridis_c(option = "C", direction = -1, name = "Population Estimate") +  # Use a continuous color scale
labs(title = "Map of Total Population by Country",
subtitle = "Based on 'pop_est' column from ne_10m_admin_0_sovereignty") +
theme_minimal() +
theme(legend.position = "bottom")  # Adjust legend position as needed
# Plot the map
ggplot(data = countries) +
geom_sf(aes(fill = POP_EST), color = "white", size = 0.1) +  # Use pop_est for coloring
scale_fill_viridis_c(option = "C", direction = -1, name = "Population Estimate") +  # Use a continuous color scale
labs(title = "Map of Total Population by Country",
subtitle = "Based on 'pop_est' column from ne_10m_admin_0_sovereignty") +
theme_minimal() +
theme(legend.position = "bottom")  # Adjust legend position as needed
View(countries)
sf.world <- world
library(sf)
library(ggplot2)
library(spData) # library of spatial datasets
sf.world <- world
View(sf.world)
View(countries)
View(sf.world)
sf.world <- world
# Plot the map
ggplot(data = world) +
geom_sf(aes(fill = pop), color = "white", size = 0.1) +  # Use pop_est for coloring
scale_fill_viridis_c(option = "C", direction = -1, name = "Population Estimate") +  # Use a continuous color scale
labs(title = "Map of Total Population by Country",
subtitle = "Based on 'pop_est' column from ne_10m_admin_0_sovereignty") +
theme_minimal() +
theme(legend.position = "bottom")  # Adjust legend position as needed
View(sf.world)
View(sf.world)
library(ggplot2)
library(spData) # library of spatial datasets
ggplot(data = sf.world) +
geom_sf(aes(fill = pop), color = "white", size = 0.1) +  # Use 'pop' for coloring
scale_fill_viridis_c(option = "C", direction = -1, name = "Population") +  # Use a continuous color scale
labs(title = "World Population Map",
subtitle = "Based on 'pop' column",
fill = "Population") +
theme_minimal() +
theme(legend.position = "right")
View(sf.world)
source("~/Desktop/Barcelona/Geospatial/Assignment_2/Attempt.R")
View(countries)
View(sf.world)
ggplot(data = sf.world, aes(x = pop)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +  # Adjust bins as needed
facet_wrap(~ continent, scales = "free_y") +
labs(x = "Population", y = "Frequency",
title = "Histogram of Country Population Distribution by Continent") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), strip.background = element_blank())
airports <- st_read("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Assignment_2/ne_10m_airports/ne_10m_airports.shp")
View(airports)
airports_with_continent <- st_join(airports, world[, c("continent")], join = st_within)
View(airports_with_continent)
airports_with_continent <- st_join(airports, world[, c("continent")], join = st_within)
# Ensure the dplyr package is loaded for data manipulation
library(dplyr)
airports_per_continent <- airports_with_continent %>%
group_by(continent) %>%
summarise(airports_count = n())
ggplot(airports_per_continent, aes(x = continent, y = airports_count, fill = continent)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Continent", y = "Number of Airports",
title = "Number of Airports per Continent") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
library(ggplot2)
library(spData) # library of spatial datasets
ggplot(data = sf.world) +
geom_sf(aes(fill = pop), color = "white", size = 0.1) +  # Use 'pop' for coloring
scale_fill_viridis_c(option = "C", direction = -1, name = "Population") +  # Use a continuous color scale
labs(title = "World Population Map",
subtitle = "Based on 'pop' column",
fill = "Population") +
theme_minimal() +
theme(legend.position = "right")
source("~/Desktop/Barcelona/Geospatial/Assignment_2/Attempt.R")
install.packages('IRkernel')
IRkernel::installspec()
\IRkernel::installspec(
IRkernel::installspec()
install.packages('IRkernel')
IRkernel::installspec()
install.packages("IRkernel")
IRkernel::installspec()
python3 -m IRkernel install --user --name=ir
python3 -m IRkernel install --user --name=ir
install.packages('IRkernel')
IRkernel::installspec(user = TRUE)
install.packages("IRkernel")
IRkernel::installspec(user = TRUE)
install.packages('IRkernel')
IRkernel::installspec(user = TRUE)
install.packages("IRkernel")
IRkernel::installspec(user = TRUE)
R -e 'install.packages("IRkernel")'
R -e 'install.packages("IRkernel")'
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')), type = 'source')
IRkernel::installspec(user = FALSE
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"), repos = c("http://irkernel.github.io/", getOption("repos")), type = "source")
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"), repos = c("http://irkernel.github.io/", getOption("repos")), type = "source")
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"), repos = c("http://irkernel.github.io/", getOption("repos")), type = "source")
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
R -e 'install.packages("IRkernel")'
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
IRkernel::installspec()
install.packages("devtools")
library("dplyr", quietly = TRUE)
library("maps", quietly = TRUE)
library("mapproj", quietly = TRUE)
library("ggplot2", quietly = TRUE)
library("tidyverse", quietly = TRUE)
library("viridis", quietly = TRUE)
library("sf", quietly = TRUE)
head(us_map)
us_states_map <- map_data("state")
head(us_states_map)
install.packages("usethis")
git
which git
rm(list = ls(all.names = TRUE))
# Load necessary libraries
library(sf)
library(raster)
library(dplyr)
library(terra)
library(ggplot2)
library(gdistance)
library(spData)
# Set working directory to the location of the Geospatial data
setwd("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Geo_takehome_exam/")
# Load the data
districts_data <- read.csv('BarcelonaCiutat_Districtes.csv')
accidents_data <- read.csv('2023_accidents_gu_bcn (1).csv')
roads_data <- read.csv('BCN_GrafVial_CSV/BCN_GrafVial_Trams_ETRS89_CSV.csv')
roads_shapefile <- st_read('/Users/ruimaciel/Downloads/download.csv)
roads_sf <- st_as_sf(roads_data, wkt = "GEOM_WKT", crs = 4326)
ggplot() +
geom_sf(data = roads_sf) +
theme_minimal()
# Convert accidents and roads data to sf objects
districts_sf <- st_as_sf(districts_data, wkt = "geometria_wgs84", crs = 4326)
accidents_sf <- st_as_sf(accidents_data, coords = c("Longitud_WGS84", "Latitud_WGS84"), crs = 4326)
roads_sf <- st_as_sf(roads_data, wkt = "GEOM_WKT", crs = 4326)
ggplot() +
geom_sf(data = districts_sf) +
theme_minimal()
as\]=d[pq]
ad
ggplot() +
geom_sf(data = districts_sf) +
theme_minimal()
roads_sf <- st_as_sf(roads_data, wkt = "GEOM_WKT", crs = 4326)
ggplot() +
geom_sf(data = districts_sf) +
theme_minimal()
roads_sf <- st_as_sf(roads_shapefile, wkt = "GEOM_WKT", crs = 4326)
roads_shapefile <- st_read('/Users/ruimaciel/Downloads/download.csv)
roads_sf <- st_as_sf(roads_shapefile, wkt = "GEOM_WKT", crs = 4326)
ggplot() +
geom_sf(data = districts_sf) +
theme_minimal()
roads_shapefile <- st_read('/Users/ruimaciel/Downloads/download.csv)
roads_shapefile <- read.csv('/Users/ruimaciel/Downloads/download.csv)
roads_sf <- st_as_sf(roads_shapefile, wkt = "GEOM_WKT", crs = 4326)
ggplot() +
geom_sf(data = districts_sf) +
theme_minimal()
as_adj()
hello
> roads_shapefile <- read.csv('/Users/ruimaciel/Downloads/download.csv)
roads_sf <- st_as_sf(roads_data, wkt = "GEOM_WKT", crs = 4326)
View(roads_data)
roads_shapefile <- st_read('/Users/ruimaciel/Downloads/download.csv)
rm(list = ls(all.names = TRUE))
