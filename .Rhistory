group_by(Codi_districte, Mes_any) %>%
summarize(total_accidents = n())
# Merge the aggregated data with districts_sf
districts_sf_joined_month <- left_join(districts_sf, accidents_agg_month, by = c("codi_districte" = "Codi_districte"))
# Plot the data
ggplot() +
geom_sf(data = districts_sf_joined_month, aes(fill = total_accidents), color = 'black') +  # Plot districts
scale_fill_viridis(option = "viridis", discrete=FALSE, name = "Accident Count", labels = scales::comma) +
labs(title = "Total Number of Accidents by District and Month in Barcelona") +
theme_void() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5)) +
facet_wrap(~Mes_any, ncol = 4) # Facet plot by hour of the day
# Aggregate the number of accidents by district name and hour of the day
accidents_agg_names_month <- accidents_data %>%
group_by(Nom_districte, Mes_any) %>%
summarize(total_accidents = n())
# Plot the line plot for number of accidents by hour
ggplot(accidents_agg_names_month, aes(x = Mes_any, y = total_accidents, color = factor(Nom_districte))) +
geom_line() +
scale_color_viridis_d() + # Apply viridis color scheme
labs(title = "Number of Accidents by Month",
x = "Month",
y = "Number of Accidents",
color = "District") +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Load crosswalks data
crosswalks_data <- read.csv('Infraestructures_Inventari_Pas_Vianants.csv')
# Filter out records where Data_Alta is greater than January 1, 2024 and Data_Baixa is smaller than January 1, 2023 so that we keep the crosswalks that were active in 2023
crosswalks_data <- crosswalks_data %>%
filter(Data_Alta < as.Date("2024-01-01")) %>%
filter(Data_Baixa == "" | Data_Baixa >= as.Date("2023-01-01"))
crosswalks_sf <- st_as_sf(crosswalks_data, coords = c("Longitud", "Latitud"), crs = 4326)
# Calculate distances between each accident point and all crosswalk points
distances <- st_distance(accidents_sf, crosswalks_sf)
# Find the minimum distance for each accident point
min_distances <- apply(distances, 1, min)
# Add the minimum distances to the accidents_sf dataset
accidents_sf$closest_crosswalk_distance <- min_distances
# Remove outliers from the closest_crosswalk_distance column:
# Calculate the first and third quartiles
q1 <- quantile(accidents_sf$closest_crosswalk_distance, 0.25)
q3 <- quantile(accidents_sf$closest_crosswalk_distance, 0.75)
# Calculate the interquartile range (IQR)
iqr <- q3 - q1
# Define the lower and upper bounds for outliers
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
# Remove outliers
accidents_sf_trimmed <- subset(accidents_sf, closest_crosswalk_distance >= lower_bound & closest_crosswalk_distance <= upper_bound)
# Group data by Codi_barri and calculate count of accidents and average closest_crosswalk_distance
grouped_data <- accidents_sf_trimmed %>%
group_by(Codi_barri) %>%
summarize(total_accidents = n(),
avg_distance = mean(closest_crosswalk_distance, na.rm = TRUE))
# Run linear regression
linear_model <- lm(total_accidents ~ avg_distance, data = grouped_data)
# Add regression line to the scatter plot
scatter_with_regression <- ggplot(grouped_data, aes(x = avg_distance, y = total_accidents)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add linear regression line
labs(title = "Total Accidents vs. Closest Crosswalk Distance",
x = "Average Closest Crosswalk Distance",
y = "Total Accidents") +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Print the scatter plot with regression line
print(scatter_with_regression)
# Print summary of linear regression
summary(linear_model)
#Load roads map as it will be our bas
streets_data <- read.csv('transit_relacio_trams.csv')
# Parse 'coordenades' into a list of numeric vectors
streets_data$coordenades_parsed <- lapply(streets_data$Coordenades, function(coord_str) {
# Split the string into individual numbers
coord_parts <- unlist(strsplit(coord_str, ","))
# Convert the character vector to a numeric matrix (2 columns for longitude and latitude)
matrix(as.numeric(coord_parts), ncol = 2, byrow = TRUE)
})
# Create LineString geometries
streets_data$geometry <- lapply(streets_data$coordenades_parsed, function(coords) {
st_linestring(coords)
})
streets_data_sf <- st_sf(streets_data, geometry = st_sfc(streets_data$geometry, crs = 4326))
# Perform spatial intersection to retain only streets within the city limits
streets_within_city_limits <- st_intersection(streets_data_sf, st_union(districts_sf))
# Load the traffic dataset into a dataframe
traffic_flow <- read_csv("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Traffic/2023_01_Gener_TRAMS_TRAMS.csv", show_col_types = FALSE)
# Convert the data column to character for datetime parsing
traffic_flow$data <- as.character(traffic_flow$data)
# Attempt to parse each date-time, substituting NA for failures
traffic_flow <- traffic_flow %>%
mutate(data_parsed = case_when(
!is.na(data) ~ ymd_hms(data, quiet = TRUE),
TRUE ~ as.POSIXct(NA)
))
# Plot average traffic state in January 2023
traffic_january <- traffic_flow %>%
group_by(idTram) %>%
summarise(average_state = mean(estatActual, na.rm = TRUE), .groups = 'drop')
# Assuming you have an sf object with street segments called street_segments_sf and it has a column named idTram
# Merge the traffic data with the street segments data
streets_data_traffic <- merge(streets_within_city_limits, traffic_january, by.x = "Tram", by.y = "idTram")
ggplot(data = streets_data_traffic) +
geom_sf(aes(color = average_state)) +
scale_color_gradient(low = "lightblue", high = "darkred") + # Custom color scale
theme_minimal() +
labs(title = "Traffic Intensity Map",
color = "Average Traffic State") +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Filter the dataframe where 'nom_mes' equals 1
january_accidents <- accidents_sf %>%
filter(Nom_mes == "Gener")
# Spatial Join
accidents_with_streets <- st_join(january_accidents, streets_within_city_limits, join = st_nearest_feature)
# Count the number of accidents for each 'Tram' (street segment)
accidents_count_per_tram <- accidents_with_streets %>%
group_by(Tram) %>%
summarise(accident_count = n(), .groups = 'drop')
# Convert 'accidents_count_per_tram' to a data frame if it's an sf object
accidents_count_per_tram_df <- as.data.frame(accidents_count_per_tram)
# Temporarily convert 'streets_within_city_limits' to a data frame if it's an sf object
streets_df <- as.data.frame(streets_within_city_limits)
# Perform the left join
accidents_count_per_street_df <- left_join(streets_df, accidents_count_per_tram_df, by = "Tram")
# Replace NA in accident_count with 0
accidents_count_per_street_df$accident_count[is.na(accidents_count_per_street_df$accident_count)] <- 0
accidents_with_traffic_per_street <- accidents_count_per_street_df %>%
left_join(traffic_january, by = c("Tram" = "idTram"))
# Convert back to sf using the original geometry from 'streets_within_city_limits'
accidents_count_per_street <- st_as_sf(accidents_count_per_street_df, geometry = st_geometry(streets_within_city_limits), crs = st_crs(streets_within_city_limits))
# Run the linear regression
model <- lm(accident_count ~ average_state, data = accidents_with_traffic_per_street)
# Assuming 'model' is your lm model object
robust_se <- sqrt(diag(vcovHC(model, type = "HC1")))
# Add accident_count to the fitted_values dataframe
fitted_values <- data.frame(
average_state = accidents_with_traffic_per_street$average_state,
accident_count = accidents_with_traffic_per_street$accident_count,
fitted = fitted(model),
lower = fitted(model) - 1.96 * robust_se,
upper = fitted(model) + 1.96 * robust_se
)
coeftest_results <- coeftest(model, vcov = vcovHC(model, type = "HC1"))
# Print the results object
print(coeftest_results)
# Create the plot
ggplot(fitted_values, aes(x = average_state, y = accident_count)) +
geom_point() + # Plot the data points using the fitted_values dataframe
geom_line(aes(y = fitted), color = "blue") + # Add the regression line
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, fill = "blue") +
theme_minimal() # A minimal theme for a cleaner look
# Summarize the data by each 'Tram' (street segment)
accidents_count_per_tram <- accidents_with_streets %>%
group_by(Tram, Nom_districte, Mes_any, Hora_dia) %>%
summarise(victims_number = sum(Numero_victimes, na.rm = TRUE),
accident_count = n(),
avg_closest_distance = mean(closest_crosswalk_distance, na.rm = TRUE),
.groups = 'drop')
# Convert 'accidents_count_per_tram' to a data frame if it's an sf object
accidents_count_per_tram_df <- as.data.frame(accidents_count_per_tram)
# Temporarily convert 'streets_within_city_limits' to a data frame if it's an sf object
streets_df <- as.data.frame(streets_within_city_limits)
# Perform the left join
accidents_count_per_street_df <- left_join(accidents_count_per_tram_df, streets_df , by = "Tram")
# Replace NA in accident_count with 0
#accidents_count_per_street_df$accident_count[is.na(accidents_count_per_street_df$accident_count)] <- 0
accidents_with_traffic_per_street <- accidents_count_per_street_df %>%
left_join(traffic_january, by = c("Tram" = "idTram"))
# Run the linear regression
model <- lm(victims_number ~ Nom_districte + Hora_dia + avg_closest_distance + average_state, data = accidents_with_traffic_per_street)
summary(model)
## Clean the environment and set the working directory
# Clean the environment
rm(list = ls(all.names = TRUE))
# Set the working directory to the location of the Geospatial data
setwd("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Geo_takehome_exam")
#setwd("/Users/viktoriia/Desktop/BSE/Term 2/Geospatial/Geo_takehome_exam")
## Load necessary libraries
library(sf, quietly = TRUE)         # For handling spatial data
library(ggplot2, quietly = TRUE)    # For plotting
library(raster, quietly = TRUE)     # For creating raster data
library(terra, quietly = TRUE)      # For spatial data manipulation, similar to raster but more recent
library(dplyr, quietly = TRUE)      # For data manipulation
library(viridis, quietly = TRUE)    # For color palettes
library(gridExtra, quietly = TRUE)  # For plots arrangement
library(readr, quietly = TRUE)      # For read_csv
library(lubridate, quietly = TRUE)  # For date-time conversion
library(sandwich, quietly = TRUE)
library(lmtest, quietly = TRUE)
# Load the data
districts_data <- read.csv('BarcelonaCiutat_Districtes.csv')
accidents_data <- read.csv('2023_accidents_gu_bcn (1).csv')
# Convert districts and accidents data to sf objects
districts_sf <- st_as_sf(districts_data, wkt = "geometria_wgs84", crs = 4326)
accidents_sf <- st_as_sf(accidents_data, coords = c("Longitud_WGS84", "Latitud_WGS84"), crs = 4326)
# Shape of the accidents df
dim(accidents_data)
# Remove observations with missing data (filter out -1 values from Codi_districte)
accidents_data <- accidents_data %>%
filter(Codi_districte != -1)
head(accidents_data)
# Aggregate the number of accidents by district
accidents_agg <- accidents_data %>%
group_by(Codi_districte) %>%
summarize(total_accidents = n())
# Merge the aggregated data with districts_sf
districts_sf_joined <- left_join(districts_sf, accidents_agg, by = c("codi_districte" = "Codi_districte"))
# Plot the data
ggplot() +
geom_sf(data = districts_sf_joined, aes(fill = total_accidents), color = 'black') +  # Plot districts
geom_sf_label(data = districts_sf_joined, aes(label = nom_districte), size = 3, label.padding = unit(0.25, "lines"), fontface = "bold") + # Add district names
scale_fill_viridis(option = "viridis", discrete=FALSE, name = "Accident Count", labels = scales::comma) +
labs(title = "Total Number of Accidents by District in Barcelona") +
theme_void() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Define the extent based on the accidents data
ext <- st_bbox(accidents_sf)
r_extent <- raster::extent(ext$xmin, ext$xmax, ext$ymin, ext$ymax)
# Define resolution
res <- 0.002 # Adjust resolution based on your dataset
# Calculate the number of rows and columns based on the resolution
num_rows <- ceiling((ext$ymax - ext$ymin) / res)
num_cols <- ceiling((ext$xmax - ext$xmin) / res)
# Create an empty raster with defined extent and resolution
r <- raster::raster(nrows=num_rows, ncols=num_cols, xmn=ext$xmin, xmx=ext$xmax, ymn=ext$ymin, ymx=ext$ymax)
# Set the resolution of the raster
res(r) <- c(res, res)
# Rasterize the accidents data
accidents_raster <- rasterize(x=accidents_sf, y=r, field=1, fun='count', background=0)
# Convert the raster to a dataframe
accidents_df <- as.data.frame(accidents_raster, xy=TRUE)
# Replace NA with 0 if any NAs are present
if(any(is.na(accidents_df$value))) {
accidents_df$value[is.na(accidents_df$value)] <- 0
}
# Proceed to plot the heatmap
ggplot() +
geom_tile(data = accidents_df, aes(x = x, y = y, fill = layer)) +  # Heatmap of accidents
geom_sf(data = districts_sf, fill = NA, color = "black", size = 0.2) +  # Boundaries of districts
scale_fill_gradient(low = "white", high = "red", name = "Accident Count") +
coord_sf(datum = NA) +  # Use coord_sf to align the plot with the sf data
labs(title = "Heatmap of Accidents in Barcelona with District Boundaries") +
theme_void() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Print the summary (total count) for each column
total_sum <- c(
Numero_morts = sum(accidents_data$Numero_morts),
Numero_lesionats_lleus = sum(accidents_data$Numero_lesionats_lleus),
Numero_lesionats_greus = sum(accidents_data$Numero_lesionats_greus),
Numero_victimes = sum(accidents_data$Numero_victimes)
)
# Print the total sum for each column
print(total_sum)
# Filter the dataset (fatalities)
accidents_with_fatalities <- accidents_sf[accidents_sf$Numero_morts > 0, ]
# Create a plot using ggplot2
plot_fatalities <- ggplot() +
geom_sf(data = districts_sf, fill = 'white', color = 'black') +  # Plot districts
geom_sf(data = accidents_with_fatalities, color = 'red', size = 1.5, alpha = 1) + # Plot accidents
theme_void() +
labs(title = "Accidents with Fatalities") +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
plot.caption = element_text(size = 8, hjust = 0.5))
# Create a plot using ggplot2
accidents_with_serious_injuries <- accidents_sf[accidents_sf$Numero_lesionats_greus > 0, ]
# Plot the data using ggplot2
plot_serious_injuries <- ggplot() +
geom_sf(data = districts_sf, fill = 'white', color = 'black') +  # Plot districts
geom_sf(data = accidents_with_serious_injuries, color = 'red', size = 1.5, alpha = 0.7) + # Plot accidents
theme_void() +
labs(title = "Accidents with Serious Injuries") +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Arrange plots side by side
grid.arrange(plot_fatalities, plot_serious_injuries, ncol = 2)
# Calculate the total number of accidents by district
accidents_by_district <- accidents_data %>%
group_by(Nom_districte, Codi_districte) %>%
summarize(total_accidents = n())
# Calculate the total number of minor injuries by district
injuries_by_district <- accidents_data %>%
group_by(Nom_districte) %>%
summarize(total_minor_injuries = sum(Numero_lesionats_lleus, na.rm = TRUE))
# Merge the two datasets by district code
injuries_rate_by_district <- merge(accidents_by_district, injuries_by_district, by = "Nom_districte")
# Calculate the rate of injuries per accident by district
injuries_rate_by_district$injuries_per_accident <- injuries_rate_by_district$total_minor_injuries / injuries_rate_by_district$total_accidents
# Sort the data by injuries_per_accident in descending order
injuries_rate_by_district <- injuries_rate_by_district %>%
arrange(desc(injuries_per_accident))
# Merge the aggregated data with districts_sf
districts_sf_injuries <- left_join(districts_sf, injuries_rate_by_district, by = c("codi_districte" = "Codi_districte"))
# Plot the data
ggplot() +
geom_sf(data = districts_sf_injuries, aes(fill = injuries_per_accident), color = 'black') +  # Plot districts
geom_sf_label(data = districts_sf_joined, aes(label = nom_districte), size = 3, label.padding = unit(0.25, "lines"), fontface = "bold") + # Add district names
scale_fill_viridis(option = "viridis", discrete=FALSE, name = "Injuries per Accident", labels = scales::comma) +
labs(title = "Minor Injuries Rate by District") +
theme_void() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Number of accidents by hour
accidents_data %>%
group_by(Hora_dia) %>%
summarize(total_accidents = n()) %>%
arrange(desc(total_accidents))
# Aggregate the number of accidents by district and hour of the day
accidents_agg <- accidents_data %>%
group_by(Codi_districte, Hora_dia) %>%
summarize(total_accidents = n())
# Merge the aggregated data with districts_sf
districts_sf_joined <- left_join(districts_sf, accidents_agg, by = c("codi_districte" = "Codi_districte"))
# Plot the data
ggplot() +
geom_sf(data = districts_sf_joined, aes(fill = total_accidents), color = 'black') +  # Plot districts
scale_fill_viridis(option = "viridis", discrete=FALSE, name = "Accident Count", labels = scales::comma) +
labs(title = "Total Number of Accidents by District and Hour in Barcelona") +
theme_void() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5)) +
facet_wrap(~Hora_dia, ncol = 6) # Facet plot by hour of the day
# Aggregate the number of accidents by district name and hour of the day
accidents_agg_names <- accidents_data %>%
group_by(Nom_districte, Hora_dia) %>%
summarize(total_accidents = n())
# Plot the line plot for number of accidents by hour
ggplot(accidents_agg_names, aes(x = Hora_dia, y = total_accidents, color = factor(Nom_districte))) +
geom_line() +
scale_color_viridis_d() + # Apply viridis color scheme
labs(title = "Number of Accidents by Hour of the Day",
x = "Hour of the Day",
y = "Number of Accidents",
color = "District") +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Number of accidents by month
accidents_data %>%
group_by(Mes_any) %>%
summarize(total_accidents = n()) %>%
arrange(desc(total_accidents))
# Aggregate the number of accidents by district and hour of the day
accidents_agg_month <- accidents_data %>%
group_by(Codi_districte, Mes_any) %>%
summarize(total_accidents = n())
# Merge the aggregated data with districts_sf
districts_sf_joined_month <- left_join(districts_sf, accidents_agg_month, by = c("codi_districte" = "Codi_districte"))
# Plot the data
ggplot() +
geom_sf(data = districts_sf_joined_month, aes(fill = total_accidents), color = 'black') +  # Plot districts
scale_fill_viridis(option = "viridis", discrete=FALSE, name = "Accident Count", labels = scales::comma) +
labs(title = "Total Number of Accidents by District and Month in Barcelona") +
theme_void() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5)) +
facet_wrap(~Mes_any, ncol = 4) # Facet plot by hour of the day
# Aggregate the number of accidents by district name and hour of the day
accidents_agg_names_month <- accidents_data %>%
group_by(Nom_districte, Mes_any) %>%
summarize(total_accidents = n())
# Plot the line plot for number of accidents by hour
ggplot(accidents_agg_names_month, aes(x = Mes_any, y = total_accidents, color = factor(Nom_districte))) +
geom_line() +
scale_color_viridis_d() + # Apply viridis color scheme
labs(title = "Number of Accidents by Month",
x = "Month",
y = "Number of Accidents",
color = "District") +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Load crosswalks data
crosswalks_data <- read.csv('Infraestructures_Inventari_Pas_Vianants.csv')
# Filter out records where Data_Alta is greater than January 1, 2024 and Data_Baixa is smaller than January 1, 2023 so that we keep the crosswalks that were active in 2023
crosswalks_data <- crosswalks_data %>%
filter(Data_Alta < as.Date("2024-01-01")) %>%
filter(Data_Baixa == "" | Data_Baixa >= as.Date("2023-01-01"))
crosswalks_sf <- st_as_sf(crosswalks_data, coords = c("Longitud", "Latitud"), crs = 4326)
# Calculate distances between each accident point and all crosswalk points
distances <- st_distance(accidents_sf, crosswalks_sf)
# Find the minimum distance for each accident point
min_distances <- apply(distances, 1, min)
# Add the minimum distances to the accidents_sf dataset
accidents_sf$closest_crosswalk_distance <- min_distances
# Remove outliers from the closest_crosswalk_distance column:
# Calculate the first and third quartiles
q1 <- quantile(accidents_sf$closest_crosswalk_distance, 0.25)
q3 <- quantile(accidents_sf$closest_crosswalk_distance, 0.75)
# Calculate the interquartile range (IQR)
iqr <- q3 - q1
# Define the lower and upper bounds for outliers
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
# Remove outliers
accidents_sf_trimmed <- subset(accidents_sf, closest_crosswalk_distance >= lower_bound & closest_crosswalk_distance <= upper_bound)
# Group data by Codi_barri and calculate count of accidents and average closest_crosswalk_distance
grouped_data <- accidents_sf_trimmed %>%
group_by(Codi_barri) %>%
summarize(total_accidents = n(),
avg_distance = mean(closest_crosswalk_distance, na.rm = TRUE))
# Run linear regression
linear_model <- lm(total_accidents ~ avg_distance, data = grouped_data)
# Add regression line to the scatter plot
scatter_with_regression <- ggplot(grouped_data, aes(x = avg_distance, y = total_accidents)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add linear regression line
labs(title = "Total Accidents vs. Closest Crosswalk Distance",
x = "Average Closest Crosswalk Distance",
y = "Total Accidents") +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Print the scatter plot with regression line
print(scatter_with_regression)
# Print summary of linear regression
summary(linear_model)
#Load roads map as it will be our bas
streets_data <- read.csv('transit_relacio_trams.csv')
# Parse 'coordenades' into a list of numeric vectors
streets_data$coordenades_parsed <- lapply(streets_data$Coordenades, function(coord_str) {
# Split the string into individual numbers
coord_parts <- unlist(strsplit(coord_str, ","))
# Convert the character vector to a numeric matrix (2 columns for longitude and latitude)
matrix(as.numeric(coord_parts), ncol = 2, byrow = TRUE)
})
# Create LineString geometries
streets_data$geometry <- lapply(streets_data$coordenades_parsed, function(coords) {
st_linestring(coords)
})
streets_data_sf <- st_sf(streets_data, geometry = st_sfc(streets_data$geometry, crs = 4326))
# Perform spatial intersection to retain only streets within the city limits
streets_within_city_limits <- st_intersection(streets_data_sf, st_union(districts_sf))
# Load the traffic dataset into a dataframe
traffic_flow <- read_csv("/Users/ruimaciel/Desktop/Barcelona/Geospatial/Traffic/2023_01_Gener_TRAMS_TRAMS.csv", show_col_types = FALSE)
# Convert the data column to character for datetime parsing
traffic_flow$data <- as.character(traffic_flow$data)
# Attempt to parse each date-time, substituting NA for failures
traffic_flow <- traffic_flow %>%
mutate(data_parsed = case_when(
!is.na(data) ~ ymd_hms(data, quiet = TRUE),
TRUE ~ as.POSIXct(NA)
))
# Plot average traffic state in January 2023
traffic_january <- traffic_flow %>%
group_by(idTram) %>%
summarise(average_state = mean(estatActual, na.rm = TRUE), .groups = 'drop')
# Assuming you have an sf object with street segments called street_segments_sf and it has a column named idTram
# Merge the traffic data with the street segments data
streets_data_traffic <- merge(streets_within_city_limits, traffic_january, by.x = "Tram", by.y = "idTram")
ggplot(data = streets_data_traffic) +
geom_sf(aes(color = average_state)) +
scale_color_gradient(low = "lightblue", high = "darkred") + # Custom color scale
theme_minimal() +
labs(title = "Traffic Intensity Map",
color = "Average Traffic State") +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# Filter the dataframe where 'nom_mes' equals 1
january_accidents <- accidents_sf %>%
filter(Nom_mes == "Gener")
# Spatial Join
accidents_with_streets <- st_join(january_accidents, streets_within_city_limits, join = st_nearest_feature)
# Count the number of accidents for each 'Tram' (street segment)
accidents_count_per_tram <- accidents_with_streets %>%
group_by(Tram) %>%
summarise(accident_count = n(), .groups = 'drop')
# Convert 'accidents_count_per_tram' to a data frame if it's an sf object
accidents_count_per_tram_df <- as.data.frame(accidents_count_per_tram)
# Temporarily convert 'streets_within_city_limits' to a data frame if it's an sf object
streets_df <- as.data.frame(streets_within_city_limits)
# Perform the left join
accidents_count_per_street_df <- left_join(streets_df, accidents_count_per_tram_df, by = "Tram")
# Replace NA in accident_count with 0
accidents_count_per_street_df$accident_count[is.na(accidents_count_per_street_df$accident_count)] <- 0
accidents_with_traffic_per_street <- accidents_count_per_street_df %>%
left_join(traffic_january, by = c("Tram" = "idTram"))
# Convert back to sf using the original geometry from 'streets_within_city_limits'
accidents_count_per_street <- st_as_sf(accidents_count_per_street_df, geometry = st_geometry(streets_within_city_limits), crs = st_crs(streets_within_city_limits))
# Run the linear regression
model <- lm(accident_count ~ average_state, data = accidents_with_traffic_per_street)
# Assuming 'model' is your lm model object
robust_se <- sqrt(diag(vcovHC(model, type = "HC1")))
# Add accident_count to the fitted_values dataframe
fitted_values <- data.frame(
average_state = accidents_with_traffic_per_street$average_state,
accident_count = accidents_with_traffic_per_street$accident_count,
fitted = fitted(model),
lower = fitted(model) - 1.96 * robust_se,
upper = fitted(model) + 1.96 * robust_se
)
coeftest_results <- coeftest(model, vcov = vcovHC(model, type = "HC1"))
# Print the results object
print(coeftest_results)
# Create the plot
ggplot(fitted_values, aes(x = average_state, y = accident_count)) +
geom_point() + # Plot the data points using the fitted_values dataframe
geom_line(aes(y = fitted), color = "blue") + # Add the regression line
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, fill = "blue") +
theme_minimal() # A minimal theme for a cleaner look
# Summarize the data by each 'Tram' (street segment)
accidents_count_per_tram <- accidents_with_streets %>%
group_by(Tram, Nom_districte, Mes_any, Hora_dia) %>%
summarise(victims_number = sum(Numero_victimes, na.rm = TRUE),
accident_count = n(),
avg_closest_distance = mean(closest_crosswalk_distance, na.rm = TRUE),
.groups = 'drop')
# Convert 'accidents_count_per_tram' to a data frame if it's an sf object
accidents_count_per_tram_df <- as.data.frame(accidents_count_per_tram)
# Temporarily convert 'streets_within_city_limits' to a data frame if it's an sf object
streets_df <- as.data.frame(streets_within_city_limits)
# Perform the left join
accidents_count_per_street_df <- left_join(accidents_count_per_tram_df, streets_df , by = "Tram")
# Replace NA in accident_count with 0
#accidents_count_per_street_df$accident_count[is.na(accidents_count_per_street_df$accident_count)] <- 0
accidents_with_traffic_per_street <- accidents_count_per_street_df %>%
left_join(traffic_january, by = c("Tram" = "idTram"))
# Run the linear regression
model <- lm(victims_number ~ Nom_districte + Hora_dia + avg_closest_distance + average_state, data = accidents_with_traffic_per_street)
summary(model)
